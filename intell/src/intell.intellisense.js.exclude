
intellisense.addEventListener('statementcompletion', function (e) {
    if (e.target == intell) {
        // if object is intell, hide all extension method
        e.items = e.items.filter(function (item) {
            return ['apply', 'bind', 'call', 'caller', 'prototype', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'valueOf',
                    'propertyIsEnumerable', 'toLocaleString', 'arguments', 'toMethod', 'name', 'length'].indexOf(item.name) == -1;
        });

    }
});


intellisense.annotate(intell, function (selector, a) {
    ///<glyph>vs:GlyphLibrary</glyph>
});
intellisense.annotate(intell.eventFn, function (selector, a) {
    ///<signature>  
    ///<summary>Create a function that use to add or fire events.</summary>
    ///<param name='onlyFire1time' type="Boolean">EventListener only fire one time.</param>
    ///<returns type="Funtion"/>
    ///</signature>
    ///<glyph>vs:GlyphGroupEvent</glyph>
});
intellisense.annotate(intell.get, function (url) {
    ///<signature>
    ///<summary>Get data from the server using GET request.</summary>
    ///<param name='url' type='String'>xx</param>
    ///<returns type="XMLHttpRequest"/>
    ///</signature>
});
intellisense.annotate(intell.post, function (url, data, option) {
    ///<signature>
    ///<summary>Post data to the server using POST request.</summary>
    ///<param name='url' type='String'/>
    ///<param name='data' type='String'/>
    ///<returns type="XMLHttpRequest"/>
    ///</signature>
    ///<signature>
    ///<summary>Post data to the server using POST request.</summary>
    ///<param name='url' type='String'/>
    ///<param name='data' type='String'/>
    ///<param name='options' type='Object'/>
    ///<returns type="XMLHttpRequest"/>
    ///</signature>
    ///<signature>
    ///<summary>Post FormData to the server using POST request.</summary>
    ///<param name='url' type='String'/>
    ///<param name='data' type='FormData'/>
    ///<returns type="XMLHttpRequest"/>
    ///</signature>
});
intellisense.annotate(intell.qs, function () {
    ///<signature>
    ///<summary>Shorthand of intell.qs(location.search).</summary>
    ///<returns type="Object"/>
    ///</signature>
    ///<signature>
    ///<summary>Parse a query string, constructing the JavaScript value or object described by the string.</summary>
    ///<param name='search' type='String'/>
    ///<returns type="Object"/>
    ///</signature>
});

intellisense.annotate(String.prototype.between, function (startWith, endWith, include) {
    ///<signature>  
    ///<summary>returns the part of the string between the start and end string.</summary>
    ///<param name='startWith' type="String">.</param>
    ///<param name='endWith' type="String">.</param>
    ///<param name='include' type="Boolean" optional="true">.</param>
    ///<returns type="String"/>
    ///</signature>
    ///<glyph>vs:GlyphGroupTemplate</glyph>
});
intellisense.annotate(Number.prototype.formatNumber, function (option) {
    ///<signature>  
    ///<summary>Format number into string; 1,000,000.12;</summary>
    ///<returns type="String"/>
    ///</signature>
    ///<glyph>vs:GlyphGroupTemplate</glyph>
});


//intell.controls
intellisense.annotate(intell, {
    ///<summary></summary>
    ///<glyph>vs:GlyphDialogId</glyph>
    controls: {}
});
intellisense.annotate(intell.controls.NumericUpDown, function (element, option) {
    ///<param name='element' type='Element'/> 
    ///<param name='option' type='Object'/> 
    ///<glyph>vs:GlyphDialogId</glyph>
});
intellisense.annotate(intell.controls.TagsInput, function (element, option) {
    ///<param name='element' type='Element'/> 
    ///<param name='option' type='Object'/> 
    ///<glyph>vs:GlyphDialogId</glyph>
});
intellisense.annotate(intell.controls.TargetPopup, function (element, option) {
    ///<param name='element' type='Element'/> 
    ///<param name='option' type='Object'/> 
    ///<glyph>vs:GlyphDialogId</glyph>
});
intell.controls.__hideExtension__ = true;