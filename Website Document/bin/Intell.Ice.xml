<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intell.Ice</name>
    </assembly>
    <members>
        <member name="T:Intell.Ice.Api.ApiHttpHandler">
            <summary>
            Defines the contract that ASP.NET implements to synchronously process HTTP Web
                requests using custom API HTTP handlers.
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.ApiHttpHandler.IsReusable">
            <summary> Gets a value indicating whether another request can use the System.Web.IHttpHandler instance. </summary>
        </member>
        <member name="M:Intell.Ice.Api.ApiHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary> Process of HTTP Web requests by a custom HttpHandler that implements the System.Web.IHttpHandler interface. </summary>
        </member>
        <member name="M:Intell.Ice.Api.ApiHttpHandler.ProcessRequestApi(System.Web.HttpContext)">
            <summary> Process of HTTP API Web requests. </summary>
        </member>
        <member name="T:Intell.Ice.Api.DescriptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.IncorrectType">
            <summary>
              Looks up a localized string similar to Value {0} is incorrect type..
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.InvalidRequest">
            <summary>
              Looks up a localized string similar to Request is not well-formed..
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.MissingArgument">
            <summary>
              Looks up a localized string similar to Missing a required argument {0}..
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.OK">
            <summary>
              Looks up a localized string similar to The request was successfully completed..
            </summary>
        </member>
        <member name="P:Intell.Ice.Api.DescriptionResources.Success">
            <summary>
              Looks up a localized string similar to The request was successfully completed..
            </summary>
        </member>
        <member name="T:Intell.Ice.Api.JsonHelper">
            <summary> 
                A hepler class for working with <seealso cref="N:Newtonsoft.Json.Linq"/>.
                All methods in this class always throw exception when can't complete.
            </summary>
            <exception cref="T:Intell.Ice.HandledException">Always throw when can't complete task.</exception>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.ToJObject(System.IO.Stream)">
            <summary> Read to end of the stream then parse them to <seealso cref="T:Newtonsoft.Json.Linq.JObject"/> </summary>
            <exception cref="T:Intell.Ice.HandledException">Always throw when can't complete task.</exception>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.ToJArray(System.IO.Stream)">
            <summary> Read to end of the stream then parse them to <seealso cref="T:Newtonsoft.Json.Linq.JArray"/> </summary>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.GetValue``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Gets <seealso cref="T:Newtonsoft.Json.Linq.JValue"/> with the specified key and convert it to the specified type. </summary>
            <exception cref="T:Intell.Ice.HandledException">Throw when <seealso cref="T:Newtonsoft.Json.Linq.JToken"/> is null.</exception>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.GetValue``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>Gets <seealso cref="T:Newtonsoft.Json.Linq.JValue"/> with the specified key and convert it to the specified type.</summary>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Gets <seealso cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key and convert it to the specified object type.</summary>
        </member>
        <member name="M:Intell.Ice.Api.JsonHelper.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>Gets <seealso cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key and convert it to the specified object type.</summary>
        </member>
        <member name="P:Intell.Ice.Api.JApiResult.Done">
            <summary>
              Represents a <seealso cref="T:Intell.Ice.Api.JApiResult"/> that has <seealso cref="P:Intell.Ice.Api.JApiResult.Code"/> set to zero.
            </summary>
        </member>
        <member name="M:Intell.Ice.Data.BaseData.#ctor">
            <summary>Initializes a new instance of row without data.</summary>
        </member>
        <member name="M:Intell.Ice.Data.BaseData.#ctor(System.Data.Common.DbDataReader)">
            <summary>Initializes a new instance of row with specified columns from the current row of DbDataReader.</summary>
        </member>
        <member name="P:Intell.Ice.Data.BaseData.Item(System.String)">
            <summary>Gets or sets value of column from its name.</summary>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:Intell.Ice.HandledException">
            <summary> 
             Represents errors that occur during an application programming interface execution. 
             The exception is handled from inside.
            </summary>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlConnectionExtension.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>Excute a Command to build a object.</summary>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlConnectionExtension.GetReader(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>Gets private property Reader of MySqlConnection.</summary>
            <returns>The current MySqlDataReader attached with MySqlConnection.</returns>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlConnectionExtension.GetIsInUse(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>Gets private property IsInUse of MySqlConnection.</summary>
            <returns>true if the connection parameter is busy.</returns>
        </member>
        <member name="T:Intell.Ice.MySqlClient.MySqlConnectionWrapper">
            <summary>Wrapper class for MySql.Data.MySqlConnection.</summary>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlConnectionWrapper.#ctor(MySql.Data.MySqlClient.MySqlConnection,System.DateTime)">
            <summary>Initializes a new instance of a Wrapper class with specific MySqlConnection, DateTime.</summary>
        </member>
        <member name="P:Intell.Ice.MySqlClient.MySqlConnectionWrapper.Connection">
            <summary>Gets or sets MySqlConnection.</summary>
        </member>
        <member name="P:Intell.Ice.MySqlClient.MySqlConnectionWrapper.CreatedTime">
            <summary>Gets or sets DateTime.</summary>
        </member>
        <member name="P:Intell.Ice.MySqlClient.MySqlConnectionWrapper.Reader">
            <summary>Gets private property Reader of MySqlConnection.</summary>
        </member>
        <member name="P:Intell.Ice.MySqlClient.MySqlConnectionWrapper.IsInUse">
            <summary>Gets private property IsInUse of MySqlConnection.</summary>
            <returns>true if the connection parameter is busy.</returns>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlConnectionWrapper.IsTimeout(System.Int32)">
            <summary>Determines if Wrapper is created longer than an specific seconds from initialization.</summary>
            <param name="seconds">Elapsed time in seconds.</param>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlNaming.IsValidColumnName(System.String)">
            <summary>Indicates whether the specified columnName is valid or not.
            <para>Warning: this function is simple not contain all rules of SQL.</para>
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Intell.Ice.MySqlClient.MySqlSearchGenerator">
            <summary>A group o</summary>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlSearchGenerator.GetWhereClauseFromSearchJSON(Newtonsoft.Json.Linq.JObject)">
            <summary>Gets WHERE clause for a search command from a json object.</summary>
            <param name="jObject">The JObject that contain children JToken.
            <para>Supported JToken type are string, number, bool, Array&lt;string&gt;, Array&lt;int&gt; and Array&lt;Array&lt;int&gt;&gt; for range select.</para>
            </param>
            <returns>The where clause, such as "WHERE name="Woody"", or null if don't have any conditions.</returns>
            <example>WHERE (0&lt;=price AND price&lt;=5000) OR price=2</example>
        </member>
        <member name="M:Intell.Ice.MySqlClient.MySqlSearchGenerator.GetConditionFrom(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>Gets compare clause for a JToken.</summary>
            <param name="jToken">Supported JToken type are string, number, bool, Array&lt;string&gt;, Array&lt;int&gt; and Array&lt;Array&lt;int&gt;&gt; for range select.</param>
            <param name="columnName">A valid columnName will be used in command. 
            <para>If columnName is not valid or unsafe, return null.</para>
            </param>
            <returns>The compare clause, such as "type=3", or null if don't have any compare or not support.</returns>
        </member>
        <member name="T:Intell.Ice.Web.UrlRewriter">
            <summary>Represents a rewriter that use a list of <see cref='T:Intell.Ice.Web.UrlRewriteRule'/> to rewrite 
            url in <see cref='T:System.Web.HttpContext'/>.</summary>
        </member>
        <member name="M:Intell.Ice.Web.UrlRewriter.Rewrite(System.Web.HttpContext)">
            <summary>Rewrite path for HttpContext. If successful, return RewriteRule else return null.</summary>
        </member>
        <member name="M:Intell.Ice.Web.UrlRewriter.RewriteDefaultFile(System.Web.HttpContext,Intell.Ice.Web.UrlRewriteRuleAction)">
            <summary>If context.Request.Path refers to an existing directory on disk, 
            rewrite to default.aspx, default.html or {folder}.html in folder.</summary>
        </member>
        <member name="T:Intell.Ice.Web.UrlRewriteRule">
            <summary>Represents a rewrite rule that will be used by <see cref='T:Intell.Ice.Web.UrlRewriter'/>.</summary>
        </member>
        <member name="M:Intell.Ice.Web.UrlRewriteRule.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref='T:Intell.Ice.Web.UrlRewriteRule'/> class.</summary>
            <param name="match"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Intell.Ice.Web.UrlRewriteRule.#ctor(System.String,System.String,Intell.Ice.Web.UrlRewriteRuleAction)">
            <summary>Initializes a new instance of the <see cref='T:Intell.Ice.Web.UrlRewriteRule'/> class.</summary>
        </member>
        <member name="P:Intell.Ice.Web.UrlRewriteRule.Match">
            <summary>
            Gets or sets the match rule.
            <para>Example: /account/[*], /account</para>
            </summary>
        </member>
        <member name="P:Intell.Ice.Web.UrlRewriteRule.Destination">
            <summary>
            Gets or sets the destination rule.
            <para>Example: /portal?app=[*]</para>
            </summary>
        </member>
        <member name="P:Intell.Ice.Web.UrlRewriteRule.Action">
            <summary>Gets or sets the action for this rule.</summary>
        </member>
        <member name="T:Intell.Ice.Web.UrlRewriteRuleAction">
            <summary></summary>
        </member>
    </members>
</doc>
